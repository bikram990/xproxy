project(xproxy)
cmake_minimum_required(VERSION 2.8)
aux_source_directory(. SRC_LIST)
add_executable(${PROJECT_NAME} ${SRC_LIST})

message(STATUS "release c flags: " ${CMAKE_C_FLAGS_RELEASE})
message(STATUS "debug c flags: " ${CMAKE_C_FLAGS_DEBUG})
message(STATUS "release cxx flags: " ${CMAKE_CXX_FLAGS_RELEASE})
message(STATUS "debug cxx flags: " ${CMAKE_CXX_FLAGS_DEBUG})
message(STATUS ${CMAKE_BUILD_TYPE})
message(STATUS "c flags: " ${CMAKE_C_FLAGS})
message(STATUS "cxx flags: " ${CMAKE_CXX_FLAGS})

# for boost library
if(WIN32)
    set(BOOST_ROOT "D:/SDTs/Boost")
    set(Boost_USE_STATIC_LIBS ON)
    set(Boost_USE_MULTITHREADED ON)
    if(MINGW)
        target_link_libraries(${PROJECT_NAME} ws2_32 wsock32)
    endif()
    if(MSVC)
        set(Boost_COMPILER "-vc110")
        add_definitions(-D_WIN32_WINNT=0x0501)
    endif()
endif()

find_package(Boost 1.54.0 COMPONENTS system date_time regex log log_setup filesystem thread chrono REQUIRED)
if(Boost_FOUND)
    message(STATUS "Boost is found at: " ${Boost_INCLUDE_DIRS} ", lib: " ${Boost_LIBRARIES})
    if(NOT WIN32)
        add_definitions(-DBOOST_LOG_DYN_LINK)
    endif()
    include_directories(${Boost_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
else()
    message(FATAL_ERROR "Boost is not found.")
endif()

if(UNIX)
    target_link_libraries(${PROJECT_NAME} pthread)
endif()

# for OpenSSL library depended by boost::asio
if(WIN32)
    set(OPENSSL_ROOT_DIR "D:/SDTs/OpenSSL")
    find_package(OpenSSL)
    if(OPENSSL_FOUND)
        message(STATUS "OpenSSL is found at: " ${OPENSSL_INCLUDE_DIR} ", lib: " ${OPENSSL_LIBRARIES})
        include_directories(${OPENSSL_INCLUDE_DIR})
        target_link_libraries(${PROJECT_NAME} ${OPENSSL_LIBRARIES})
    else()
        message(FATAL_ERROR "OpenSSL is not found.")
    endif()
endif()

# copy configuration file
configure_file(xproxy.conf xproxy.conf COPYONLY)
